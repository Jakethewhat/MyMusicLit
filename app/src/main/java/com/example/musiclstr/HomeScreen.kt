package com.example.musiclstr

import android.os.Bundle
import android.util.Log
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class HomeScreen : AppCompatActivity() {
    private val apiService = RetrofitClient.apiService  // Create a reference to apiService
    private val songService = RetrofitClient.songService // Create a reference to songService
    private lateinit var recyclerView: RecyclerView
    private lateinit var songAdapter: SongAdapter
    private val songList = mutableListOf<Song>() // List to hold songs

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        recyclerView = findViewById(R.id.recyclerView)
        recyclerView.layoutManager = LinearLayoutManager(this)
        songAdapter = SongAdapter(songList)
        recyclerView.adapter = songAdapter

        // Example: Register a new user
        registerUser("username", "password")

        // Example: Login a user
        loginUser("username", "password")

        // Fetch all songs using the song service
        fetchAllSongs()

        // Example: Add a new song
        addNewSong()

        // Example: Fetch a song by ID
        fetchSongById(1) // Replace 1 with the actual song ID you want to fetch
    }

    private fun registerUser(username: String, password: String) {
        val registerRequest = RegisterRequest(username, password)

        apiService.register(registerRequest).enqueue(object : Callback<ApiResponse> {
            override fun onResponse(call: Call<ApiResponse>, response: Response<ApiResponse>) {
                if (response.isSuccessful) {
                    Log.d("Register", "User registered successfully: ${response.body()?.message}")
                } else {
                    Log.d("Register", "Registration failed: ${response.errorBody()?.string()}")
                }
            }

            override fun onFailure(call: Call<ApiResponse>, t: Throwable) {
                Log.e("Register", "Network error: ${t.message}")
            }
        })
    }

    private fun loginUser(username: String, password: String) {
        val loginRequest = LoginRequest(username, password)

        apiService.login(loginRequest).enqueue(object : Callback<ApiResponse> {
            override fun onResponse(call: Call<ApiResponse>, response: Response<ApiResponse>) {
                if (response.isSuccessful) {
                    Log.d("Login", "User logged in successfully: ${response.body()?.message}")
                } else {
                    Log.d("Login", "Login failed: ${response.errorBody()?.string()}")
                }
            }

            override fun onFailure(call: Call<ApiResponse>, t: Throwable) {
                Log.e("Login", "Network error: ${t.message}")
            }
        })
    }

    private fun fetchAllSongs() {
        songService.getAllSongs().enqueue(object : Callback<List<Song>> {
            override fun onResponse(call: Call<List<Song>>, response: Response<List<Song>>) {
                if (response.isSuccessful) {
                    val songs = response.body() ?: emptyList()
                    // Update the RecyclerView with the fetched songs
                    updateRecyclerView(songs)
                    Log.d("Songs", "Fetched songs: $songs")
                } else {
                    Log.d("Songs", "Failed to fetch songs: ${response.errorBody()?.string()}")
                }
            }

            override fun onFailure(call: Call<List<Song>>, t: Throwable) {
                Log.e("Songs", "Network error: ${t.message}")
            }
        })
    }

    private fun addNewSong() {
        val newSong = Song(
            id = 0,  // Assuming ID is generated by the server
            title = "New Song Title",
            artist = "New Artist Name",
            url = "https://www.example.com/song-url"
        )

        songService.addSong(newSong).enqueue(object : Callback<Song> {
            override fun onResponse(call: Call<Song>, response: Response<Song>) {
                if (response.isSuccessful) {
                    val addedSong = response.body()
                    Log.d("Songs", "Song added: $addedSong")
                    addedSong?.let {
                        songList.add(it) // Add the new song to the list
                        songAdapter.notifyItemInserted(songList.size - 1) // Notify adapter
                    }
                } else {
                    Log.d("Songs", "Failed to add song: ${response.errorBody()?.string()}")
                }
            }

            override fun onFailure(call: Call<Song>, t: Throwable) {
                Log.e("Songs", "Network error: ${t.message}")
            }
        })
    }

    private fun fetchSongById(songId: Int) {
        songService.getSongById(songId).enqueue(object : Callback<Song> {
            override fun onResponse(call: Call<Song>, response: Response<Song>) {
                if (response.isSuccessful) {
                    val song = response.body()
                    Log.d("Songs", "Fetched song: $song")
                } else {
                    Log.d("Songs", "Failed to fetch song: ${response.errorBody()?.string()}")
                }
            }

            override fun onFailure(call: Call<Song>, t: Throwable) {
                Log.e("Songs", "Network error: ${t.message}")
            }
        })
    }

    // Move the updateRecyclerView function outside fetchSongById
    private fun updateRecyclerView(songs: List<Song>) {
        songList.clear() // Clear the existing list
        songList.addAll(songs) // Add the new songs
        songAdapter.notifyDataSetChanged() // Notify adapter of data change
    }
}
